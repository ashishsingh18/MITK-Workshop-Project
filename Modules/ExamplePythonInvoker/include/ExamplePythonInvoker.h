#ifndef ExamplePythonInvoker_h
#define ExamplePythonInvoker_h

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkExamplePythonInvokerExports.h>

#include <mitkIPythonService.h>
#include <usModuleContext.h>

class QString;
class Image;

namespace captk {
/** \class ExamplePythonInvoker
 *  \brief Workshop Example Python Invoker Module API
 *  This is a simple module to show how Python scripts can be invoked/wrapped by a module.
 *  For reference, MITK-Diffusion primarily calls python
 *  from the plugin side. (See: TractSeg, BrainExtraction, Dipy ODF Reconstruction)
 *  This class provides some support for script compatibility, enabling 
 *  imports of custom modules and using arbitrary resource files.
 *  Ideally this will encourage good development practices with Python.
 *  TODO: This class needs work/cleanup.
 */
class MITKEXAMPLEPYTHONINVOKER_EXPORT ExamplePythonInvoker
{

public:
	ExamplePythonInvoker();
	~ExamplePythonInvoker() {}

    // Work functions.
    // Most scripts will probably only need one work function.
    // Anything interactive in nature will need more work connecting between plugin and module.
    mitk::Image::Pointer ProcessImageInPython(mitk::Image::Pointer inputImage);
    void RunSampleScript();

    // Utility functions for working with python
    bool IsOkayToRun();
    void PassArgsToPython(std::vector<std::string> args); // convenience function
    bool ChangeWorkingDirectory(std::string newWorkingDirectoryPath);

protected:
    // instance-specific python service
    // Each instance of this class refers to and runs a separate python instance.
    // We could make these public if we want to enable more configurability from the plugin.
    us::ServiceReference<mitk::IPythonService> m_PythonServiceRef;
    mitk::IPythonService* m_PythonService;

    // path to our located python files
    std::string pythonFilesDirPath;
    bool pythonFilesDirFound; 


    void RegisterResourceDir(std::string resourceDirPath);
    void RegisterPackageDir(std::string packageDirPath);

    std::string LocatePythonFileDir();


};


}

#endif // ! ExamplePythonInvoker_h
